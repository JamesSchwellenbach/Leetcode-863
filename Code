# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution: #beats 29.12% runtime, 95.92% Memory 
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        ret = []
        parents = {}
        queue = deque()
        queue.append(root)
        while(queue):
            size = len(queue)
            for i in range(size):
                curr = queue.popleft()
                if curr.left:
                    parents[curr.left.val] = curr
                    queue.append(curr.left)
                if curr.right:
                    parents[curr.right.val] = curr
                    queue.append(curr.right)
        
        visited = {}
        queue.append(target)
        while k > 0 and queue:
            size = len(queue)
            for i in range(size):
                curr = queue.popleft()
                visited[curr.val] = 1
                if curr.left and curr.left.val not in visited:
                    queue.append(curr.left)
                if curr.right and curr.right.val not in visited:
                    queue.append(curr.right)
                if curr.val in parents and parents[curr.val].val not in visited:
                    queue.append(parents[curr.val])
            k -= 1
        while queue:
            ret.append(queue.popleft().val)
        return ret
